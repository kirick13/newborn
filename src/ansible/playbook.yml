---

- hosts: all
  tasks:

  # Variables from facts gathering such as "ansible_machine", "ansible_architecture" or "ansible_userspace_architecture" are wrong about "amd64" architecture, they state that this is an "x86_64"
  - name: Get architecture of target node
    shell: dpkg --print-architecture
    register: newborn_arch

  - name: Set swap
    script: "../scripts/swap.sh {{ newborn_swap_size }}"

  - name: Set password for root
    user:
      name: root
      password: "{{ newborn_user_password | password_hash('sha512', newborn_user_password_salt) }}"

  - name: Set hostname
    hostname:
      name: "{{ newborn_hostname }}"
      use: systemd

  - name: Add hostname to /etc/hosts
    lineinfile:
      path: /etc/hosts
      line: "127.0.0.1 {{ newborn_hostname }}"

  - name: Resize filesystem
    shell: |
      DISK_LABEL=$(df | grep -E '\/$' | awk '{print $1}')
      resize2fs $DISK_LABEL
      df -h | grep $DISK_LABEL
      unset DISK_LABEL

  - name: Set UTC timezone
    shell: |
      ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
      dpkg-reconfigure --frontend noninteractive tzdata

  - name: Update system
    apt:
      update_cache: true
      upgrade: dist
      autoremove: true
      lock_timeout: 600

  - name: Install packages
    apt:
      name:
        - curl
        - python3
        - vim
        - iptables-persistent
        - cron
      lock_timeout: 600

  - name: Copy the iptables update script
    copy:
      src: ../scripts/iptables.sh
      dest: /root/iptables.sh
      owner: root
      group: root
      mode: '0755'
    when: newborn_firewall == "y"

  - name: Execute the iptables update script
    shell: /root/iptables.sh
    when: newborn_firewall == "y"

  - name: Create a cron job to apply iptables
    cron:
      name: Update iptables rules
      user: root
      minute: '{{ 59 | random }}'
      hour: '{{ 23 | random }}'
      job: '/root/iptables.sh >/dev/null 2>&1'
    when: newborn_firewall == "y"

  - name: Create a cron job to fix iptables
    cron:
      name: Lookup iptables rules and fix if needed
      user: root
      minute: '*/5'
      job: '/root/iptables.sh fix >/dev/null 2>&1'
    when: newborn_firewall == "y"

  - name: Copy .bashrc file
    copy:
      src: ../configs/bash
      dest: /etc/bash.bashrc
      owner: root
      group: root
      mode: '0644'

  - name: Delete root-related .bashrc file
    file:
      path: /root/.bashrc
      state: absent

  - name: Set server name to .bashrc file
    lineinfile:
      path: /etc/bash.bashrc
      regexp: '^MYHOSTNAME=""$'
      line: 'MYHOSTNAME="{{ newborn_server_name }}"'
    when: newborn_server_name is defined

  - name: Set server name to .bashrc file
    lineinfile:
      path: /etc/bash.bashrc
      regexp: '^MYHOSTNAME=""$'
      line: 'MYHOSTNAME="{{ newborn_server_name_global }}"'
    when: newborn_server_name is not defined

  - name: Add Docker apt repository key
    get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /etc/apt/trusted.gpg.d/docker.asc
      mode: '0644'
    when: newborn_oci_platform == "docker"

  - name: Add Docker repository
    apt_repository:
      repo: "deb [arch={{ newborn_arch.stdout }} signed-by=/etc/apt/trusted.gpg.d/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      update_cache: yes
    when: newborn_oci_platform == "docker"

  - name: Install Docker
    apt:
      name: docker-ce
      lock_timeout: 600
    when: newborn_oci_platform == "docker"

  - name: Copy Docker daemon logging config file
    copy:
      src: ../configs/docker-daemon.json
      dest: /etc/docker/daemon.json
      owner: root
      group: root
      mode: '0644'
    when: newborn_oci_platform == "docker"

  - name: Restart Docker daemon
    service:
      name: docker
      state: restarted
    when: newborn_oci_platform == "docker"

  - name: Create Docker plugins directory
    file:
      path: /usr/local/lib/docker/cli-plugins
      state: directory
    when: newborn_oci_platform == "docker" and newborn_oci_compose == "y"

  - name: Install Docker Compose
    get_url:
      url: "https://github.com/docker/compose/releases/download/v2.12.0/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
      dest: /usr/local/lib/docker/cli-plugins/docker-compose
      mode: '0755'
    when: newborn_oci_platform == "docker" and newborn_oci_compose == "y"

  - name: Install Podman
    apt:
      name: podman
      lock_timeout: 600
    when: newborn_oci_platform == "podman"

  - name: Install Pip3
    apt:
      name: python3-pip
      lock_timeout: 600
    when: newborn_oci_platform == "podman" and newborn_oci_compose == "y"

  - name: Install Podman Compose
    pip:
      name: podman-compose
    when: newborn_oci_platform == "podman" and newborn_oci_compose == "y"

  - name: Install Snap
    apt:
      name:
        - snapd
      lock_timeout: 600
    when: newborn_k8s == "microk8s"

  - name: Install MicroK8S
    shell: snap install microk8s --classic
    when: newborn_k8s == "microk8s"

  - name: Create user "{{ newborn_user_name }}"
    user:
      name: "{{ newborn_user_name }}"
      password: "{{ newborn_user_password | password_hash('sha512', newborn_user_password_salt) }}"
      shell: /bin/bash

  - name: Add user "{{ newborn_user_name }}" to group "sudo"
    user:
      name: "{{ newborn_user_name }}"
      groups: sudo
      append: true
    when: newborn_user_sudo == "y"

  - name: Add user "{{ newborn_user_name }}" to group "docker"
    user:
      name: "{{ newborn_user_name }}"
      groups: docker
      append: true
    when: newborn_oci_platform == "docker"

  - name: Add user "{{ newborn_user_name }}" to group "microk8s"
    user:
      name: "{{ newborn_user_name }}"
      groups: microk8s
      append: true
    when: newborn_k8s == "microk8s"

  - name: Remove .bashrc file related to user "{{ newborn_user_name }}"
    file:
      path: "/home/{{ newborn_user_name }}/.bashrc"
      state: absent

  - name: Create .ssh directory for user "{{ newborn_user_name }}"
    file:
      path: "/home/{{ newborn_user_name }}/.ssh"
      state: directory
      owner: "{{ newborn_user_name }}"
      group: "{{ newborn_user_name }}"

  - name: Add SSH key for user "{{ newborn_user_name }}"
    copy:
      src: /app/input/ssh_key.pub
      dest: "/home/{{ newborn_user_name }}/.ssh/authorized_keys"
      owner: "{{ newborn_user_name }}"
      group: "{{ newborn_user_name }}"
      mode: '0644'

  - name: Set OpenSSH server config
    copy:
      src: ../configs/sshd
      dest: /etc/ssh/sshd_config
      mode: '0644'

  - name: Set SSH port to OpenSSH config file
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^Port 22$'
      line: "Port {{ newborn_ssh_port }}"

  - name: Restart OpenSSH server
    systemd_service:
      name: ssh
      state: restarted
      daemon_reload: true

  - name: Execute the iptables update script to reflect changes in SSH port
    shell: /root/iptables.sh
    when: newborn_firewall == "y"
